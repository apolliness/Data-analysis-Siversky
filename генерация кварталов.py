# -*- coding: utf-8 -*-
"""Генерация кварталов (готово).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kKL8-Xs-LbFsdeXUvIT3uRFG6xV0z3bA
"""

pip install momepy -q

!pip install folium matplotlib mapclassify -q

!pip install blocksnet ipykernel -q

!pip install mapclassify -q

import geopandas as gpd

boundary = gpd.read_file("/content/data/boundary.geojson")

import osmnx as ox

boundary.plot()

"""Определяем локальную CRS для города в метрах, к ней будем приводить все имеющиеся геометрии (и, соответственно, получать слой кварталов)."""

local_crs = boundary.estimate_utm_crs()

roads = gpd.read_file("/content/data/road_one.geojson")

water = gpd.read_file("/content/data/water.geojson")

boundary = boundary.reset_index()[['geometry']].to_crs(local_crs)
water = water.reset_index()[['geometry']].to_crs(local_crs)
roads = roads.reset_index()[['geometry']].to_crs(local_crs)
#railways = railways.reset_index()[['geometry']].to_crs(local_crs)

roads = roads[roads.geom_type.isin(['LineString', 'MultiLineString'])]

import momepy
GAP_TOLERANCE = 1
def _get_roads(roads):
    merged = roads.unary_union
    if merged.geom_type == 'MultiLineString':
        roads = gpd.GeoDataFrame(geometry=list(merged.geoms), crs=roads.crs)
    else:
        roads = gpd.GeoDataFrame(geometry=[merged], crs=roads.crs)
    roads = roads.explode(index_parts=False).reset_index(drop=True)
    roads.geometry = momepy.close_gaps(roads, GAP_TOLERANCE)
    roads = roads[roads.geom_type.isin(['LineString'])]
    return roads

roads = _get_roads(roads)
roads

"""Импортируем класс `BlocksGenerator` и инициализируем его экземпляр с помощью наших геометрий. На этапе инициализации:
- все геометрии проверяются по спецификации (можете увидеть при наведении курсора на BlocksGenerator);
- из геометрии границ территории удаляются полигоны водных объектов.
"""

from blocksnet import BlocksGenerator

bg = BlocksGenerator(boundary, roads)

blocks = bg.run()

"""С помощью библиотеки mapclassify мы можем выводить геометрии на карту через `.explore()`."""

blocks.explore()

blocks.plot(linewidth=0.1, figsize=(10,10)).set_axis_off()

blocks.to_file('blocks_1.geojson')